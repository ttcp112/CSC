@model NSCSC.Shared.Models.OurProducts.Product.ProductDetailViewModels
@{ 
    var totalPrice = 0.0;
}
<style>
    .row {
        margin: 0px;
    }
</style>

@Html.HiddenFor(model => model.ProductDetail.ID)
<div class="row form-horizontal form-label-left listItemYourCart">
    <div class="form-group">
        <div class="col-md-12 col-sm-12 col-xs-12">
            <table id="datatable-responsive-list-buying-addition"
                   class="table table-striped dt-responsive nowrap table table-striped jambo_table bulk_action"
                   cellspacing="0" style="width:100%;">
                <thead style="background-color:#f9f9f9;">
                    <tr>
                        <th>Type</th>
                        <th>Item Name</th>
                        <th>Quantity</th>
                        <th>Applied On</th>
                        <th>Period</th>
                        <th>Price</th>
                        <th class="text-center">Remove</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model.ProductDetail.ListProductChild != null && Model.ProductDetail.ListProductChild.Count > 0)
                    {
                        foreach (var itemAddition in Model.ProductDetail.ListProductChild)
                        {
                            @Html.Partial("_ProductItemAddition", itemAddition)
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>

    <div class="form-group itemProduct">
        <div class="col-md-12 col-sm-12 col-xs-12">
            <div class="row infoProduct" style="padding-bottom:10px;">
                <div class="col-md-10 col-sm-10 col-xs-10 text-right fontBold">
                    Total Addition Price:
                </div>
                <div class="col-md-2 col-sm-2 col-xs-2 text-right fontBold" style="font-size:20px; color:darkred;">
                  @Model.ProductDetail.CurrencySymbol<span id="lblTotalAdditionPrice">@totalPrice.ToString("N2")</span>
                </div>
            </div>
        </div>
    </div>

    <div class="form-group itemProduct pading-top-bottom">
        <div class="row infoProduct" style="padding-bottom:10px;">
            <div class="col-md-12 col-sm-12 col-xs-12 pading-top-bottom" style="font-size:15px;">
                <div class="col-md-12 col-sm-12 col-xs-2">
                    Please select the desired items in below list
                </div>
            </div>
            <div class="col-md-12 col-sm-12 col-xs-12">
                <div class="col-md-12 col-sm-12 col-xs-12 text-left" style="padding-left:0px;">
                    Filter by Type of Additions
                    &nbsp;&nbsp;
                    @Html.DropDownListFor(model => model.ProductDetail.Period,
                         new SelectList(@ViewBag.ListAdditionType, "Value", "Text", Model.ProductDetail.Period), null,
                         new
                         {
                             @class = "form-control",
                             @id = "TypeAdditionDdl",
                             @style = "width:150px;",
                         })
                </div>
            </div>
        </div>
    </div>

    @*List Item*@
    <div id="listItemAddition"></div>

    @*Cancel | Done*@
    <div class="row">
        <div class="col-md-12 col-sm-12 col-xs-12 text-right">
            <a class="btn btn-default fontUppercase" style="width:180px;" href="javascript:void(0)"
               onclick="CloseModalBuyingAddition()">cancel</a>
            <a class="btn btn-primary fontUppercase" style="width:180px;"
               onclick="CloneDataAddition()"
               @*onclick="SubmitForm('#form-buying-addition')"*@>Done</a>
        </div>
        <div class="col-md-12 col-sm-12 col-xs-12 text-right">
            <small class="label label-danger" id="lblMsg"></small>
        </div>
    </div>
</div>


<script type="text/javascript">
    var _total = 0.0;
    var _arrtotal = []; 
    var displayLength = 200;
    var _tableBuyingAddition = null;
    var _settingsOptionTableBuyingAddition = {
        "columnDefs": [
               { "orderable": false, "targets": [6] },
               { "width": "12%", "targets": [] },
               { "width": "5%", "targets": [2, 3, 4, 5, 6] },
        ],
        "order": [
            [0, 'asc'],
            [1, 'asc']
        ],
        "autoWidth": false,
        "displayLength": displayLength,
        "bInfo": false,
        "searching": false,
        "lengthChange": false,
        "paging": false,

        //"drawCallback": function () {
        //    var api = this.api();
        //    $('#lblTotalAdditionPrice').html(api.column(5, { page: 'current' }).data().sum().toFixed(2));
        //    //$(api.table().footer()).html(
        //    //  api.column(5, { page: 'current' }).data().sum()
        //    //);
        //},
    };

    $(document).ready(function (e) {
        $("#TypeAdditionDdl").select2({
            placeholder: "Please choose Addition type"
        });

        _tableBuyingAddition = $('#datatable-responsive-list-buying-addition').DataTable($.extend(true, {}, _settingsOptionTableBuyingAddition));

        //============
        var anSelected = _tableAddition.$('tr.ng-Price');
        var data = [];
        $(anSelected).each(function () {
            _tableBuyingAddition.row.add($(this)).draw();
        });
        //_tableAddition.destroy();
    });

    $("#TypeAdditionDdl").change(function () {
        var additionType = this.value;
        GetListAdditionForProduct(additionType, '#listItemAddition');
    });

    function GetListAdditionForProduct(additionType, elemnetFillData) {
        $.ajax({
            url: CreateAbsoluteUrl("GetListAdditionForProduct"),
            type: 'GET',
            data: { AdditionType: additionType },
            dataType: 'html',
            traditional: true,
            beforeSend: function () {
                $('.se-pre-con').show();
            },
            error: function (e) {
            },
            success: function (data) {
                $(elemnetFillData).html(data);
            },
            complete: function () {
                $('.se-pre-con').hide();
            }
        });
    }

    /*Add Item Addition*/
    function AddItemAddition(btn, _type, _additionIndex) {
        //Get tr first
        var row = $(btn).parents('tr:first');

        var ID = $(row).find('input#hidAdditionID').val();
        var AdditionTypeName = $(row).find('input#hidAdditionName').val();
        var ItemName = $(row).find('input#hidItemName').val();
        var Quantity = $(row).find('input#txt_' + _type + _additionIndex + '').val();
        var Period = $(row).find('input#hidAdditionPeriod').val();
        var PeriodType = $(row).find('input#hidAdditionPeriodType').val();
        //var Price = parseFloat($(row).find('span#lblAdditionPrice').html());
        var Price = parseFloat($(row).find('input#hidAdditionPrice').val());
        var AdditionType = $(row).find('input#hidAdditionType').val();

        /*==============*/
        var _index = $('.ng-Price').length;
        var OurProDuctsModel = {
            Index: _index,
            ID: ID,
            AdditionTypeName: AdditionTypeName,
            AdditionType: AdditionType,
            Name: ItemName,
            Quantity: Quantity,
            Code: '@Model.ProductDetail.Name',
            Period: Period,
            PeriodType: PeriodType,
            Price: Price
        }
        $.ajax({
            type: "POST",
            url: CreateAbsoluteUrl("AddItemAddition"),
            traditional: true,
            data: JSON.stringify(OurProDuctsModel),
            contentType: "application/json; charset=utf-8",
            dataType: "html",
            error: function (jqXHR, textStatus, errorThrown) {

            },
            beforeSend: function () {
                $('.se-pre-con').show();
            },
            complete: function () {
                $('.se-pre-con').hide();
            },
            success: function (data) {
                _tableBuyingAddition.row.add($(data)).draw();
                //nh
                $('.ng-Price > td[data-price]').each(function (index, value) {
                    _arrtotal.push($(this).attr('data-price'));
                });
                $.each(_arrtotal, function () { _total += parseFloat(this); });
                $('#lblTotalAdditionPrice').text(_total);
                _arrtotal = [];
                _total = 0.0;
            }
        });
    }

    function DeleteAddition(OffSet) {
        var tr = $('#tr_add_price_' + OffSet);
        $(tr).find('input.PriceStatus').val(9);
        $(tr).find('input#hidIsDelete').val(true);
        $(tr).hide();
        //nh
        $('.ng-Price:visible > td[data-price]').each(function (index, value) {
            _arrtotal.push($(this).attr('data-price'));
        });
        $.each(_arrtotal, function () { _total += parseFloat(this); });
        $('#lblTotalAdditionPrice').text(_total);
        _arrtotal = [];
        _total = 0.0;
    }

    function CloneDataAddition() {
        _tableAddition.destroy();
        _tableAddition = $("#datatable-responsive-list-addition").DataTable($.extend(true, {}, _settingsOptionTableAddition));

        var anSelected = _tableBuyingAddition.$('tr.ng-Price');
        var data = [];
        $(anSelected).each(function () {
            _tableAddition.row.add($(this)).draw();
        });
        CloseModalBuyingAddition();
    }

</script>
